@model Savonia.Measurements.Models.ProviderModel

@{
    ViewBag.Title = "Create new Provider";
}

<h2>Create new Provider</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Provider</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Key, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Key, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Key, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Info, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Info, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Info, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Owner, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Owner, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Owner, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsPublic, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsPublic)
                    @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tag, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tag, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tag, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContactEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContactEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActiveFrom, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ActiveFrom, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ActiveFrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActiveTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ActiveTo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ActiveTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataStorageUntil, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataStorageUntil, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataStorageUntil, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
                <button class="btn btn-info" data-toggle="collapse" data-target=".alert-info" type="button">Info</button>
                <div class="alert alert-info collapse">
                    <p><strong>Key</strong> Defines providers password.</p>
                    <p><strong>Info</strong> Additional information about provider.</p>
                    <p><strong>Name</strong> Provider name.</p>
                    <p><strong>Owner</strong> Owner of the provider.</p>
                    <p><strong>Is Public</strong> Defines providers publicity.</p>
                    <p><strong>Tag</strong> Provider Tag.</p>
                    <p><strong>Contact email</strong> Providers contact email.</p>
                    <p><strong>Active from</strong> Defines the starting date of provider validity.</p>
                    <p><strong>Active to</strong> Defines the ending date of provider validity.</p>
                    <p><strong>Data stored untill</strong> Defines the date untill data will be erased.</p>
                    <div>
                        <strong>Location</strong> Location of provider.<br />
                        <i style="color:green;">
                            Latitude from -90 to 90 and Longitude from -180 to 180<br />
                            <b>Example:</b>Latitude = 62,8989 Longitude = 27,6630 
                        </i>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>

            @section head {
                @Styles.Render("~/Content/jquery-ui-1.11.4.custom/cssjqueryui")
                @Styles.Render("~/Content/jquery-ui-1.11.4.custom/jquery-ui.structure.css")
            }

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
                @Scripts.Render("~/bundles/jqueryui")
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#@Html.IdFor(model => model.ActiveFrom)').datepicker({ dateFormat: '@Savonia.Measurements.Models.Constants.DateFormatForJavaScript' });
                        $('#@Html.IdFor(model => model.ActiveTo)').datepicker({ dateFormat: '@Savonia.Measurements.Models.Constants.DateFormatForJavaScript' });
                        $('#@Html.IdFor(model => model.DataStorageUntil)').datepicker({ dateFormat: '@Savonia.Measurements.Models.Constants.DateFormatForJavaScript' });
                    });
                </script>
            }
