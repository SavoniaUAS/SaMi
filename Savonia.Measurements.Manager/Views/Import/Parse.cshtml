@using Savonia.Measurements.Manager.Models;
@model ParsedDataModel

@{
    ViewBag.Title = "Parsed data";
    int fieldsCount = 0;
    if (null != Model)
    {
        if (null != Model.Data && Model.Data.Count > 0 && null != Model.Data[0])
        {
            fieldsCount = Model.Data[0].Count;
        }
    }
}

<h2>Parse</h2>

@using (Html.BeginForm("SaveParsed", "Import"))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Parsed data</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Key, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Key, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Key, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.DataFieldType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.DataFieldType)
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Field keys", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <table>
                    <thead>
                        <tr>
                            <th>Index</th>
                            <th>Mapped field</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.FieldMap.Count; i++)
                        {
                            <tr>
                                <td>@i</td>
                                <td>@Html.TextBox("FieldMap", Model.FieldMap[i])</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <p>
                    Field keys legend: <i>@ParsedDataModel.MeasurementTimeField</i> is for measurement time field, <i>@ParsedDataModel.MeasurementObjectField</i> is measurement object and <i>@ParsedDataModel.MeasurementTagField</i> is measurement tag.
                    <br />
                    <i>@ParsedDataModel.MeasurementTimeField</i> should always be present, measurement object and tag are optional. Other field keys are your sensor tag names.
                    <br />
                    By default first field is assumed as <i>@ParsedDataModel.MeasurementTimeField</i>, second field as <i>@ParsedDataModel.MeasurementObjectField</i> and third field as <i>@ParsedDataModel.MeasurementTagField</i>. You can change these!
                    <br />
                    If some columns are not needed then set that columns field map value to empty.
                </p>
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Field values", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <table class="table-bordered table-striped data-table">
                    <thead>
                        <tr>
                            @for (int i = 0; i < fieldsCount; i++)
                            {
                                <th>@i</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Data)
                        {
                            <tr>
                                @for (int i = 0; i < fieldsCount; i++)
                                {
                                    <td>@item[i]</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
    
    @Html.HiddenFor(model => model.RawData)
    @Html.HiddenFor(model => model.Separators)
}

<div>
    @Html.ActionLink("Back to raw data input", "Index")
</div>
