//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Savonia.Measurements.Providers.WCFRepository.MeasurementsServiceV1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Savonia.MeasurementService.V3", ConfigurationName="MeasurementsServiceV1.IMeasurementsService")]
    public interface IMeasurementsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/SaveMeasurements", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/SaveMeasurementsResponse")]
        Savonia.Measurements.Models.SaveResult SaveMeasurements(string key, Savonia.Measurements.Models.MeasurementModel[] measurements);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/SaveMeasurements", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/SaveMeasurementsResponse")]
        System.Threading.Tasks.Task<Savonia.Measurements.Models.SaveResult> SaveMeasurementsAsync(string key, Savonia.Measurements.Models.MeasurementModel[] measurements);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/SaveMeasurementPackage", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/SaveMeasurementPackageResponse" +
            "")]
        Savonia.Measurements.Models.SaveResult SaveMeasurementPackage(Savonia.Measurements.Models.MeasurementPackage measurementPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/SaveMeasurementPackage", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/SaveMeasurementPackageResponse" +
            "")]
        System.Threading.Tasks.Task<Savonia.Measurements.Models.SaveResult> SaveMeasurementPackageAsync(Savonia.Measurements.Models.MeasurementPackage measurementPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/RestGetMeasurements", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/RestGetMeasurementsResponse")]
        Savonia.Measurements.Models.MeasurementModel[] RestGetMeasurements(string key, string sensors, string obj, string tag, string take, string from, string to, string inclusiveFrom, string inclusiveTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/RestGetMeasurements", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/RestGetMeasurementsResponse")]
        System.Threading.Tasks.Task<Savonia.Measurements.Models.MeasurementModel[]> RestGetMeasurementsAsync(string key, string sensors, string obj, string tag, string take, string from, string to, string inclusiveFrom, string inclusiveTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/GetMeasurements", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/GetMeasurementsResponse")]
        Savonia.Measurements.Models.MeasurementModel[] GetMeasurements(Savonia.Measurements.Models.MeasurementQueryModel query);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/GetMeasurements", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/GetMeasurementsResponse")]
        System.Threading.Tasks.Task<Savonia.Measurements.Models.MeasurementModel[]> GetMeasurementsAsync(Savonia.Measurements.Models.MeasurementQueryModel query);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/GetSensors", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/GetSensorsResponse")]
        Savonia.Measurements.Models.SensorModel[] GetSensors(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/GetSensors", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/GetSensorsResponse")]
        System.Threading.Tasks.Task<Savonia.Measurements.Models.SensorModel[]> GetSensorsAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/GetSaveMeasurementsTemplate", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/GetSaveMeasurementsTemplateRes" +
            "ponse")]
        Savonia.Measurements.Models.MeasurementModel[] GetSaveMeasurementsTemplate();
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/GetSaveMeasurementsTemplate", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/GetSaveMeasurementsTemplateRes" +
            "ponse")]
        System.Threading.Tasks.Task<Savonia.Measurements.Models.MeasurementModel[]> GetSaveMeasurementsTemplateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/GetSaveMeasurementPackageTempl" +
            "ate", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/GetSaveMeasurementPackageTempl" +
            "ateResponse")]
        Savonia.Measurements.Models.MeasurementPackage GetSaveMeasurementPackageTemplate();
        
        [System.ServiceModel.OperationContractAttribute(Action="Savonia.MeasurementService.V3/IMeasurementsService/GetSaveMeasurementPackageTempl" +
            "ate", ReplyAction="Savonia.MeasurementService.V3/IMeasurementsService/GetSaveMeasurementPackageTempl" +
            "ateResponse")]
        System.Threading.Tasks.Task<Savonia.Measurements.Models.MeasurementPackage> GetSaveMeasurementPackageTemplateAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasurementsServiceChannel : Savonia.Measurements.Providers.WCFRepository.MeasurementsServiceV1.IMeasurementsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeasurementsServiceClient : System.ServiceModel.ClientBase<Savonia.Measurements.Providers.WCFRepository.MeasurementsServiceV1.IMeasurementsService>, Savonia.Measurements.Providers.WCFRepository.MeasurementsServiceV1.IMeasurementsService {
        
        public MeasurementsServiceClient() {
        }
        
        public MeasurementsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MeasurementsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeasurementsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Savonia.Measurements.Models.SaveResult SaveMeasurements(string key, Savonia.Measurements.Models.MeasurementModel[] measurements) {
            return base.Channel.SaveMeasurements(key, measurements);
        }
        
        public System.Threading.Tasks.Task<Savonia.Measurements.Models.SaveResult> SaveMeasurementsAsync(string key, Savonia.Measurements.Models.MeasurementModel[] measurements) {
            return base.Channel.SaveMeasurementsAsync(key, measurements);
        }
        
        public Savonia.Measurements.Models.SaveResult SaveMeasurementPackage(Savonia.Measurements.Models.MeasurementPackage measurementPackage) {
            return base.Channel.SaveMeasurementPackage(measurementPackage);
        }
        
        public System.Threading.Tasks.Task<Savonia.Measurements.Models.SaveResult> SaveMeasurementPackageAsync(Savonia.Measurements.Models.MeasurementPackage measurementPackage) {
            return base.Channel.SaveMeasurementPackageAsync(measurementPackage);
        }
        
        public Savonia.Measurements.Models.MeasurementModel[] RestGetMeasurements(string key, string sensors, string obj, string tag, string take, string from, string to, string inclusiveFrom, string inclusiveTo) {
            return base.Channel.RestGetMeasurements(key, sensors, obj, tag, take, from, to, inclusiveFrom, inclusiveTo);
        }
        
        public System.Threading.Tasks.Task<Savonia.Measurements.Models.MeasurementModel[]> RestGetMeasurementsAsync(string key, string sensors, string obj, string tag, string take, string from, string to, string inclusiveFrom, string inclusiveTo) {
            return base.Channel.RestGetMeasurementsAsync(key, sensors, obj, tag, take, from, to, inclusiveFrom, inclusiveTo);
        }
        
        public Savonia.Measurements.Models.MeasurementModel[] GetMeasurements(Savonia.Measurements.Models.MeasurementQueryModel query) {
            return base.Channel.GetMeasurements(query);
        }
        
        public System.Threading.Tasks.Task<Savonia.Measurements.Models.MeasurementModel[]> GetMeasurementsAsync(Savonia.Measurements.Models.MeasurementQueryModel query) {
            return base.Channel.GetMeasurementsAsync(query);
        }
        
        public Savonia.Measurements.Models.SensorModel[] GetSensors(string key) {
            return base.Channel.GetSensors(key);
        }
        
        public System.Threading.Tasks.Task<Savonia.Measurements.Models.SensorModel[]> GetSensorsAsync(string key) {
            return base.Channel.GetSensorsAsync(key);
        }
        
        public Savonia.Measurements.Models.MeasurementModel[] GetSaveMeasurementsTemplate() {
            return base.Channel.GetSaveMeasurementsTemplate();
        }
        
        public System.Threading.Tasks.Task<Savonia.Measurements.Models.MeasurementModel[]> GetSaveMeasurementsTemplateAsync() {
            return base.Channel.GetSaveMeasurementsTemplateAsync();
        }
        
        public Savonia.Measurements.Models.MeasurementPackage GetSaveMeasurementPackageTemplate() {
            return base.Channel.GetSaveMeasurementPackageTemplate();
        }
        
        public System.Threading.Tasks.Task<Savonia.Measurements.Models.MeasurementPackage> GetSaveMeasurementPackageTemplateAsync() {
            return base.Channel.GetSaveMeasurementPackageTemplateAsync();
        }
    }
}
